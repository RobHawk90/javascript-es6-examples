{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","objects","map","Negociacao","Date","obj","data","quantidade","valor","catch","console","log","error","all","importaSemana","importaAnterior","importaRetrasada","results","reduce","allResult","thisResult","concat","existentes","importaTodas","filter","some","existente","equals","negociacao","ConnectionFactory","getConnection","NegociacaoDAO","connection","dao","adiciona","Error","listaTodas","_mensagem","texto","removeTodas"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["/* request negociacoes data from server */\r\nclass NegociacaoService {\r\n\r\n\tconstructor() {\r\n\t\tthis._http = new HttpService()\r\n\t}\r\n\r\n\timportaSemana() {\r\n\t\t/* encapsulates HttpService.get Promise to return list of Negociacao instance */\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._http.get('/negociacoes/semana')\r\n\t\t\t\t.then(objects => {\r\n\t\t\t\t\tlet negociacoes = objects.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))\r\n\t\t\t\t\tresolve(negociacoes)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(error => {\r\n\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\treject(\"Não foi possível importar as negociações da semana\")\r\n\t\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\timportaAnterior() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._http.get('/negociacoes/anterior')\r\n\t\t\t\t.then(objects => {\r\n\t\t\t\t\tlet negociacoes = objects.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))\r\n\t\t\t\t\tresolve(negociacoes)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(error => {\r\n\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\treject(\"Não foi possível importar as negociações da semana\")\r\n\t\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\timportaRetrasada() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._http.get('/negociacoes/retrasada')\r\n\t\t\t\t.then(objects => {\r\n\t\t\t\t\tlet negociacoes = objects.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))\r\n\t\t\t\t\tresolve(negociacoes)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(error => {\r\n\t\t\t\t\tconsole.log(error)\r\n\t\t\t\t\treject(\"Não foi possível importar as negociações da semana\")\r\n\t\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\timportaTodas() {\r\n\t\t/* try to return all negociacoes from all services */\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tPromise.all([\r\n\t\t\t\tthis.importaSemana()\r\n\t\t\t\t, this.importaAnterior()\r\n\t\t\t\t, this.importaRetrasada()\r\n\t\t\t]).then(results => { // the result of each promise\r\n\t\t\t\t/* group all negociacao */\r\n\t\t\t\tlet negociacoes = results.reduce((allResult, thisResult) => allResult.concat(thisResult))\r\n\t\t\t\tresolve(negociacoes)\r\n\t\t\t}).catch(error => reject(error))\r\n\t\t})\r\n\t}\r\n\r\n\timporta(existentes) {\r\n\t\treturn this.importaTodas()\r\n\t\t\t.then(negociacoes =>\r\n\t\t\t\tnegociacoes.filter(negociacao =>\r\n\t\t\t\t\t!existentes.some(existente =>\r\n\t\t\t\t\t\texistente.equals(negociacao)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t}\r\n\r\n\tcadastra(negociacao) {\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDAO(connection))\r\n\t\t\t.then(dao => dao.adiciona(negociacao))\r\n\t\t\t.then(() => 'Negociação adicionada com sucesso!')\r\n\t\t\t.catch(error => { throw new Error('Não foi possível adicionar a negociação.') })\r\n\t}\r\n\r\n\tlistaCadastradas() {\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDAO(connection))\r\n\t\t\t.then(dao => dao.listaTodas())\r\n\t\t\t.catch(error => { this._mensagem.texto = error })\r\n\t}\r\n\r\n\tapagaTodas() {\r\n\t\treturn ConnectionFactory.getConnection()\r\n\t\t\t.then(connection => new NegociacaoDAO(connection))\r\n\t\t\t.then(dao => dao.removeTodas())\r\n\t\t\t.then(() => 'Todos as negociações foram apagadas!')\r\n\t\t\t.catch(error => { throw new Error('Não foi possível apagar as negociações.') })\r\n\t}\r\n\r\n}\r\n"]}
{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEMA,S,GAAS,CAAC,aAAD,C;AACTC,U,GAAU,C;AACVC,S,GAAS,S;AAEXC,a,GAAa,I;AACbC,Q,GAAQ,I;;gCAGCC,iB;AAEZ,iCAAc;AAAA;;AACb,WAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACA;;;;qCAEsB;AACtB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,WAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,mBAAYI,eAAZ,GAA8B,aAAK;AAClCT,0BAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,QAFD;;AAIAR,mBAAYS,SAAZ,GAAwB,aAAK;AAC5B,YAAG,CAAChB,UAAJ,EAAgB;AAAE;AACjBA,sBAAaa,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAd,iBAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR,CAHe,CAG2B;AAC1CA,oBAAWC,KAAX,GAAmB,YAAW;AAAE;AAC/B,gBAAM,IAAIE,KAAJ,CAAU,gEAAV,CAAN;AACA,UAFD;AAGA;AACDE,gBAAQL,UAAR,EAT4B,CASR;AACpB,QAVD;;AAYAO,mBAAYW,OAAZ,GAAsB,aAAK;AAC1BC,gBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,eAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB,EAF0B,CAEE;AAC5B,QAHD;AAKA,OAzBM,CAAP;AA0BA;;;uCAGwB;AACxBrB;AACAD,mBAAa,IAAb;AACA;;;mCAGoBA,U,EAAY;AAChCH,aAAO0B,OAAP,CAAe,iBAAS;AACvB,WAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,kBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACA,OAHD;AAIA","file":"ConnectionFactory.js","sourcesContent":["/* we need to enhance our indexedDB connection creation, so here we go */\r\n/* these variables are hidden to external access */\r\nconst stores = ['negociacoes']\r\nconst version = 4\r\nconst dbName = 'exemplo'\r\n\r\nlet connection = null\r\nlet close = null\r\n\r\n/* Only this class can be visible, because it is returned and stored */\r\nexport class ConnectionFactory {\r\n\r\n\tconstructor() {\r\n\t\tthrow new Error(\"ConnectionFactory is a static class and can't be instancied.\")\r\n\t}\r\n\r\n\tstatic getConnection() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tlet openRequest = window.indexedDB.open(dbName, version)\r\n\r\n\t\t\topenRequest.onupgradeneeded = e => {\r\n\t\t\t\tConnectionFactory._createStores(e.target.result)\r\n\t\t\t}\r\n\r\n\t\t\topenRequest.onsuccess = e => {\r\n\t\t\t\tif(!connection) { // if connection not already exists...\r\n\t\t\t\t\tconnection = e.target.result\r\n\t\t\t\t\t/* only ConnectionFactory.closeConnection() can close the indexedDB connection */\r\n\t\t\t\t\tclose = connection.close.bind(connection) // we store close function to call it later\r\n\t\t\t\t\tconnection.close = function() { // alter default implementation (monkey patch)\r\n\t\t\t\t\t\tthrow new Error('To close connections, call ConnectionFactory.closeConnection()')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresolve(connection) // THEN CALL\r\n\t\t\t}\r\n\r\n\t\t\topenRequest.onerror = e => {\r\n\t\t\t\tconsole.log(e.target.error)\r\n\t\t\t\treject(e.target.error.name) // CATCH CALL\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\r\n\t/* close indexedDB singleton connection */\r\n\tstatic closeConnection() {\r\n\t\tclose()\r\n\t\tconnection = null\r\n\t}\r\n\r\n\t/* abstracting stores creation */\r\n\tstatic _createStores(connection) {\r\n\t\tstores.forEach(store => {\r\n\t\t\tif(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)\r\n\t\t\tconnection.createObjectStore(store, {autoIncrement: true})\r\n\t\t})\r\n\t}\r\n\r\n}\r\n"]}
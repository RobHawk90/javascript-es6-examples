{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAY;AAAE;AACtC;AACA,KAAMC,SAAS,CAAC,aAAD,CAAf;AACA,KAAMC,UAAU,CAAhB;AACA,KAAMC,SAAS,SAAf;;AAEA,KAAIC,aAAa,IAAjB;AACA,KAAIC,QAAQ,IAAZ;;AAEA;AACA;AAEC,+BAAc;AAAA;;AACb,SAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACA;;AAJF;AAAA;AAAA,mCAMwB;AACtB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,SAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,iBAAYI,eAAZ,GAA8B,aAAK;AAClCd,wBAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,MAFD;;AAIAR,iBAAYS,SAAZ,GAAwB,aAAK;AAC5B,UAAG,CAACf,UAAJ,EAAgB;AAAE;AACjBA,oBAAaY,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAb,eAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR,CAHe,CAG2B;AAC1CA,kBAAWC,KAAX,GAAmB,YAAW;AAAE;AAC/B,cAAM,IAAIC,KAAJ,CAAU,gEAAV,CAAN;AACA,QAFD;AAGA;AACDE,cAAQJ,UAAR,EAT4B,CASR;AACpB,MAVD;;AAYAM,iBAAYW,OAAZ,GAAsB,aAAK;AAC1BC,cAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,aAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB,EAF0B,CAEE;AAC5B,MAHD;AAKA,KAzBM,CAAP;AA0BA;;AAED;;AAnCD;AAAA;AAAA,qCAoC0B;AACxBpB;AACAD,iBAAa,IAAb;AACA;;AAED;;AAzCD;AAAA;AAAA,iCA0CsBA,UA1CtB,EA0CkC;AAChCH,WAAOyB,OAAP,CAAe,iBAAS;AACvB,SAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AAChDzB,gBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACA,KAHD;AAIA;AA/CF;;AAAA;AAAA;AAkDA,CA5DuB,EAAxB,C,CA4DK","file":"ConnectionFactory.js","sourcesContent":["/* we need to enhance our indexedDB connection creation, so here we go */\r\nvar ConnectionFactory = (function () { // init module pattern\r\n\t/* these variables are hidden to external access */\r\n\tconst stores = ['negociacoes']\r\n\tconst version = 4\r\n\tconst dbName = 'exemplo'\r\n\r\n\tvar connection = null\r\n\tvar close = null\r\n\r\n\t/* Only this class can be visible, because it is returned and stored */\r\n\treturn class ConnectionFactory {\r\n\r\n\t\tconstructor() {\r\n\t\t\tthrow new Error(\"ConnectionFactory is a static class and can't be instancied.\")\r\n\t\t}\r\n\r\n\t\tstatic getConnection() {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\t\tlet openRequest = window.indexedDB.open(dbName, version)\r\n\r\n\t\t\t\topenRequest.onupgradeneeded = e => {\r\n\t\t\t\t\tConnectionFactory._createStores(e.target.result)\r\n\t\t\t\t}\r\n\r\n\t\t\t\topenRequest.onsuccess = e => {\r\n\t\t\t\t\tif(!connection) { // if connection not already exists...\r\n\t\t\t\t\t\tconnection = e.target.result\r\n\t\t\t\t\t\t/* only ConnectionFactory.closeConnection() can close the indexedDB connection */\r\n\t\t\t\t\t\tclose = connection.close.bind(connection) // we store close function to call it later\r\n\t\t\t\t\t\tconnection.close = function() { // alter default implementation (monkey patch)\r\n\t\t\t\t\t\t\tthrow new Error('To close connections, call ConnectionFactory.closeConnection()')\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresolve(connection) // THEN CALL\r\n\t\t\t\t}\r\n\r\n\t\t\t\topenRequest.onerror = e => {\r\n\t\t\t\t\tconsole.log(e.target.error)\r\n\t\t\t\t\treject(e.target.error.name) // CATCH CALL\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/* close indexedDB singleton connection */\r\n\t\tstatic closeConnection() {\r\n\t\t\tclose()\r\n\t\t\tconnection = null\r\n\t\t}\r\n\r\n\t\t/* abstracting stores creation */\r\n\t\tstatic _createStores(connection) {\r\n\t\t\tstores.forEach(store => {\r\n\t\t\t\tif(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)\r\n\t\t\t\tconnection.createObjectStore(store, {autoIncrement: true})\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t}\r\n})() // end module pattern\r\n"]}